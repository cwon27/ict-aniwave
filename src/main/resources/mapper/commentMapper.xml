<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ict.finalproject.DAO.CommentDAO">


    <insert id="insertComment" parameterType="com.ict.finalproject.vo.CommentVO">
        INSERT into t_comment (comm_idx, useridx, content, regDT) values(#{comm_idx}, #{useridx}, #{content}, NOW())
    </insert>


    <insert id="insertReply" parameterType="com.ict.finalproject.vo.CommentVO">
        INSERT INTO t_comment (comm_idx, useridx, content
        <if test="parentidx != null">
            ,parentidx, depth
        </if>
        ) VALUES (
        #{comm_idx},
        #{useridx},
        #{content}

        <!-- 대댓글(답글)의 경우 -->
        <if test="parentidx != null">
            ,#{parentidx},2  <!-- 대댓글일 경우 parentidx는 원댓글의 idx -->
            <!-- 대댓글의 depth는 2 -->
        </if>
        )
    </insert>

    <select id="getComment" parameterType="int" resultType="com.ict.finalproject.vo.CommentVO">
        WITH RECURSIVE comment_hierarchy AS (
        -- 부모 댓글 (parentidx가 NULL인 댓글)
        SELECT
        c.idx,
        c.comm_idx,
        c.content,
        c.useridx,
        c.regDT,
        c.depth,
        c.parentidx,
        u.userid
        FROM
        t_comment c
        JOIN
        t_user u ON c.useridx = u.idx
        WHERE
        c.comm_idx = #{comm_idx} AND c.delState = 0 AND c.parentidx IS NULL  -- 부모 댓글

        UNION ALL

        -- 자식 댓글 (부모 댓글의 idx를 parentidx로 가진 댓글)
        SELECT
        child.idx,
        child.comm_idx,
        child.content,
        child.useridx,
        child.regDT,
        child.depth,
        child.parentidx,
        u.userid
        FROM
        t_comment child
        JOIN
        t_user u ON child.useridx = u.idx
        JOIN
        comment_hierarchy parent ON child.parentidx = parent.idx
        WHERE
        child.comm_idx = #{comm_idx} AND child.delState = 0
        )
        SELECT *
        FROM comment_hierarchy
        ORDER BY
        COALESCE(parentidx, idx),
        parentidx ASC,  -- 부모 댓글을 기준으로 정렬
        depth ASC,      -- 댓글의 깊이를 기준으로 정렬
        regDT ASC;      -- 작성 시간을 기준으로 정렬
    </select>


    <!-- 댓글 수정 -->
    <update id="updateCommnet" parameterType="com.ict.finalproject.vo.CommentVO">
        UPDATE t_comment
        SET content = #{content}, modifyState = 1, modifyDT = NOW()
        WHERE idx = #{idx}
    </update>

    <!-- 댓글 삭제 -->
    <update id="deleteComment" parameterType="int">
        UPDATE t_comment SET delState = 1, delDT = NOW() WHERE idx = #{idx}
    </update>





</mapper>
