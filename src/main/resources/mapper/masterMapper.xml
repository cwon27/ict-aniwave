<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ict.finalproject.DAO.MasterDAO">

    <!-- 관리자 페이지 공지사항 등록 -->
    <insert id="insertNotice" parameterType="com.ict.finalproject.vo.MasterVO">
        INSERT INTO t_notice (title, content, adminidx)
        VALUES (#{title}, #{content}, 2)
    </insert>

    <!-- 관리자페이지 자주묻는 질문 등록 -->
    <insert id="insertFAQ" parameterType="com.ict.finalproject.vo.MasterVO">
        insert into t_faq (question,answer,faqtype,adminidx) values(#{question}, #{answer}, #{faqtype} , #{adminidx})
    </insert>

    <!-- 관리자 페이지 굿즈 상품 등록 -->
    <insert id="createStore" parameterType="MasterVO" useGeneratedKeys="true" keyProperty="idx">
        INSERT INTO t_product (category, title, price, thumImg, ani_title, relDT, brand, pro_detail, fee, stock, second_category, adminidx)
        VALUES (#{category}, #{title}, #{price}, #{thumImg}, #{ani_title}, #{relDT}, #{brand}, #{pro_detail}, #{fee}, #{stock}, #{second_category}, #{adminidx})
    </insert>

    <!-- 관리자페이지 자주묻는 질문 리스트 -->
    <select id="getFAQList" resultType="com.ict.finalproject.vo.MasterVO">
        select f.idx, f.question, ft.type as faqtype, DATE_FORMAT(f.regDT, '%Y-%m-%d') as regDT
        from t_faq f join t_faqtype ft ON f.faqtype = ft.code ORDER BY f.idx ASC;
    </select>

    <!-- 관리자 페이지 굿즈 상품 테이블 전체 목록 조회 -->
    <select id="getStoreList" resultType="com.ict.finalproject.vo.MasterVO">
        SELECT
        p.idx,
        p.title,
        p.price,
        p.stock,
        DATE_FORMAT(p.relDT, '%Y-%m-%d') as relDT,
        f.type AS category
        FROM
        t_product p
        LEFT JOIN
        t_firstcategory f ON p.category = f.code
        ORDER BY
        p.idx
    </select>

    <!-- 관리자페이지 굿즈 상품 총 상품수 구하기 -->
    <select id="getTotalStore">
        select count(*) from t_product
    </select>

    <!-- 관리자페이지 굿즈 상품테이블 카테고리별 카운트 구하기 -->
    <select id="getCategoryCountByCode" resultType="map" parameterType="int">
        SELECT  tf.code AS category_code,  tf.type AS category_type,  COUNT(p.category) AS product_category
        FROM t_firstcategory tf LEFT JOIN t_product p ON p.category = tf.code
        WHERE tf.code = #{categoryCode} GROUP BY tf.code, tf.type
    </select>

    <!-- 커뮤니티 테이블 모든 목록 불러오기 -->
    <select id="getBoardList" resultType="MasterVO">
        SELECT c.idx, tc.type AS category, c.title, u.userid AS author, DATE_FORMAT(c.regDT, '%Y-%m-%d') as regDT, c.hit, c.commtype
        FROM t_community c LEFT JOIN t_communitytype tc ON c.commtype = tc.code
        LEFT JOIN t_user u ON c.useridx = u.idx ORDER BY c.idx
    </select>

    <!-- 애니 전체 리스트 불러오기 -->
    <select id="getAniAllList" resultType="MasterVO">
        select a.idx, a.title, a.anitype, at.type as anitype_type, a.agetype, ag.type as age_type, a.director, a.outline, DATE_FORMAT(a.regDT, '%Y-%m-%d') as regDT
        from t_animation a left join t_anitype at on a.anitype = at.code
        left join t_agetype ag on a.agetype = ag.code
    </select>

    <!-- 해당 어드민의 idx 구하기 -->
    <select id="getAdminIdxByAdminid" resultType="int">
        SELECT idx
        FROM t_admin
        WHERE adminid = #{adminid}
    </select>

    <!-- 관리자페이지 공지사항 목록 불러오기  -->
    <select id="getNoticeList">
        SELECT n.idx, n.title, n.content, DATE_FORMAT(n.regDT, '%Y-%m-%d') as regDT, u.username AS admin_name, DATE_FORMAT(n.modifyDT, '%Y-%m-%d') as modifyDT
        FROM t_notice n
        JOIN t_user u ON n.adminidx = u.idx
    </select>

    <!-- 모든 리뷰 불러오기 -->
    <select id="getReplyList">
        SELECT r.idx, u.userid, r.content, r.grade, DATE_FORMAT(r.regDT, '%Y-%m-%d') as regDT
        FROM t_review r JOIN t_user u ON r.useridx = u.idx
    </select>

    <!-- idx에 대한 리뷰 상세보기  -->
    <select id="getReviewDetail" resultType="MasterVO" parameterType="int">
        select r.idx, r.content, r.grade, u.userid,
        DATE_FORMAT(r.regDT, '%Y-%m-%d') as regDT,
        r.imgfile1, r.imgfile2, ol.order_idx
        from t_review r
        left join t_user u ON r.useridx = u.idx
        left join t_orderlist ol ON r.orderList_idx = ol.idx
        where r.idx = #{idx}
    </select>

    <!-- 신고 추가 -->
    <insert id="insertReport">
        INSERT INTO t_ban (useridx, stopDT, endDT, reason)
        VALUES ((SELECT u.idx FROM t_user u WHERE u.userid = #{userid}), NOW(), #{endDT}, #{reason})
    </insert>

    <!-- 신고 기능 목록 보여주기 -->
    <select id="getReportinguserList" resultType="MasterVO">
        SELECT r.idx, r.reason, r.reportDT, u.userid, r.handleState, r.handleDT
        FROM t_report r JOIN t_user u ON r.useridx = u.idx
    </select>

    <!-- 신고 테이블에 아이디 있는지 체크 -->
    <select id="isUserBanned" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM t_ban b
        JOIN t_user u ON u.idx = b.useridx
        WHERE u.userid = #{userid}
        AND NOW() BETWEEN b.stopDT AND b.endDT
    </select>

    <!-- 탈퇴 테이블에 아이디 있는지 체크 -->
    <select id="isUserDeleted" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM t_user u
        JOIN t_userDel ud ON u.idx = ud.useridx
        WHERE u.idx = #{idx}
    </select>

    <!-- 유저테이블에서 실제로 회원인지 아닌지 조회 -->
    <select id="findUserIdxByUserid" resultType="int">
        SELECT idx
        FROM t_user
        WHERE userid = #{userid}
    </select>

    <!-- 모든 댓글 불러오기 -->
    <select id="getReviewList" resultType="MasterVO">
        SELECT idx, comm_idx, content, useridx, DATE_FORMAT(regDT, '%Y-%m-%d') as regDT
        FROM t_comment
        WHERE parentidx IS NULL OR parentidx = 0
    </select>

    <!-- 탈퇴 회원 목록 보여주기 -->
    <select id="getMemberDelList" resultType="MasterVO">
        SELECT d.idx, t.userid, d.delReasonDetail, DATE_FORMAT(d.inDate, '%Y-%m-%d') as inDate
        FROM t_userDel d JOIN t_user t ON d.useridx = t.idx
    </select>

    <!-- idx의 해당하는 ani 값 불러오기 -->
    <select id="aniSelect" resultType="com.ict.finalproject.vo.MasterVO">
        select idx, title, director, outline from t_animation where idx = #{idx}
    </select>

    <!-- 애니 수정 -->
    <update id="updateAnimation" parameterType="MasterVO">
        update t_animation set post_img = #{post_img_filename}, title = #{title}, anitype = #{anitype}, director = #{director},
        agetype = #{agetype}, outline = #{outline}, modifyState = 1, modifyDT = now(), adminidx = #{adminidx} where idx= #{idx}
    </update>

    <!-- 애니 idx 값에 기존에 있던 이미지 파일 불러오기 -->
    <select id="getCurrentImgFile" resultType="String">
        SELECT post_img
        FROM t_animation
        WHERE idx = #{idx}
    </select>

    <!-- 신고 테이블에서 신고가 완료 되었을 때 처리 상태 및 처리날짜 업데이트  -->
    <update id="updateReport">
        UPDATE t_report
        SET handleState = #{handleState}, handleDT = #{handleDT}
        WHERE idx = #{idx}
    </update>

    <select id="findAdminIdxByUserid" resultType="int" parameterType="string">
        SELECT idx
        FROM t_admin
        WHERE adminid = #{adminid}
    </select>

    <!-- 문의사항 전체 목록 보여주기 -->
    <select id="getQNAList" resultType="MasterVO">
        SELECT q.idx, qt.type AS qnatype, q.title, q.content, u.userid, DATE_FORMAT(q.regDT, '%Y-%m-%d') as regDT,
        q.handleState, r.reply AS reply, q.imgfile1 as attachmentUrl FROM t_qna q
        JOIN t_qnatype qt ON q.qnatype = qt.code
        JOIN t_user u ON q.useridx = u.idx
        LEFT JOIN t_reply r ON q.idx = r.qna_idx
    </select>

    <!-- 문의 안한 실시간 갯수 카운팅 -->
    <select id="getUnansweredQnaCount">
        select count(*) from t_qna where handleState = 0
    </select>

    <!-- 신고 목록 보여주기 -->
    <select id="getReportingUser">
        SELECT b.useridx, u.userid, r.report_type, b.stopDT, b.endDT, b.reason
        FROM t_ban b
        LEFT JOIN t_user u ON b.useridx = u.idx
        LEFT JOIN t_report r ON b.useridx = r.useridx
        GROUP BY b.useridx, u.userid, r.report_type, b.stopDT, b.endDT, b.reason
    </select>

    <!-- 특정 유저의 신고 횟수를 구하는 쿼리 -->
    <select id="getTotalUserReport" parameterType="int" resultType="int">
        SELECT COUNT(DISTINCT useridx) FROM t_ban WHERE useridx = #{useridx}
    </select>

    <!-- 전체 신고 횟수를 구하는 쿼리 -->
    <select id="getTotalReportCount" resultType="int">
        SELECT COUNT(*) FROM t_ban
    </select>

    <!-- qna 처리 상태 업데이트 -->
    <update id="updateHandleState">
        UPDATE t_qna SET handleState = 1 WHERE idx = #{idx}
    </update>

    <!-- t_reply 테이블에 답변 추가 -->
    <insert id="insertReply">
        INSERT INTO t_reply (qna_idx, reply, adminidx, regDT)
        VALUES (#{idx}, #{reply}, #{adminIdx}, #{regDT})
    </insert>

    <!-- 애니 데이터 베이스 생성 -->
    <insert id="insertAnimation" parameterType="com.ict.finalproject.vo.MasterVO">
        INSERT INTO t_animation (post_img, title, anitype, director, agetype, outline, regDT, adminidx)
        VALUES (#{post_img_filename}, #{title}, #{anitype}, #{director}, #{agetype}, #{outline}, now(), #{adminidx})
    </insert>

    <!-- 해당 idx의 값의 데이터 삭제 -->
    <delete id="deletePostByIdx" parameterType="int">
        DELETE FROM t_animation WHERE idx = #{idx}
    </delete>

    <!-- 상품 정보를 idx로 조회 -->
    <select id="getStoreByIdx" resultType="MasterVO">
        SELECT * FROM t_product WHERE idx = #{idx}
    </select>

    <!-- 상품 정보를 수정 -->
    <update id="updateStore">
        UPDATE t_product SET category = #{category}, title = #{title}, price = #{price}, thumImg = #{thumImg},
        ani_title = #{ani_title}, relDT = #{relDT}, brand = #{brand}, pro_detail = #{pro_detail}, fee = #{fee},
        stock = #{stock}, second_category = #{second_category}, adminidx = #{adminidx}, modifyState = 1, modifyDT = now() WHERE idx = #{idx}
    </update>

    <select id="findSubCategoriesByCategory" resultType="MasterVO">
        SELECT code, first_code, type
        FROM t_secondcategory
        WHERE code = #{code}
    </select>

    <!-- t_productimg 테이블에 이미지 삽입 -->
    <insert id="insertProductImg" parameterType="MasterVO">
        INSERT INTO t_productimg (pro_idx, detailImg)
        VALUES (#{pro_idx}, #{detailImg})
    </insert>

    <!-- 해당 idx의 값 공지사항 조회 -->
    <select id="getNoticeById" resultType="MasterVO">
        SELECT idx, title, content, DATE_FORMAT(regDT, '%Y-%m-%d') as regDT
        FROM t_notice
        WHERE idx = #{idx}
    </select>

    <!-- 공지사항 업데이트 -->
    <update id="updateNotice">
        UPDATE t_notice
        SET title = #{title},
        content = #{content},
        modifyState = 1,
        modifyDT = now(),
        adminidx = #{adminidx}
        WHERE idx = #{idx}
    </update>

    <!-- idx의 해당하는 공지사항 값 불러오기 -->
    <select id="noticeSelect" resultType="com.ict.finalproject.vo.MasterVO">
        select idx, title, content from t_notice where idx = #{idx}
    </select>

    <!-- 답변 내용 확인하기 -->
    <select id="getQnaById" resultType="com.ict.finalproject.vo.MasterVO">
        SELECT q.idx, q.content AS content, r.reply AS reply
        FROM t_qna q LEFT JOIN
        t_reply r ON q.idx = r.qna_idx WHERE q.idx = #{idx}
    </select>

    <select id="getAdminByAdminId" resultType="com.ict.finalproject.vo.MasterVO">
        SELECT *
        FROM t_admin
        WHERE adminid = #{adminid}
    </select>

    <select id="doesProductExist" parameterType="int" resultType="int">
        SELECT COUNT(1) FROM t_product WHERE idx = #{pro_idx}
    </select>

    <!-- 기존 제품 이미지 조회 -->
    <select id="getProductImgByIdx" parameterType="int" resultType="MasterVO">
        SELECT * FROM t_productimg WHERE pro_idx = #{idx}
    </select>

    <!-- 제품 이미지 업데이트 -->
    <update id="updateProductImg" parameterType="MasterVO">
        UPDATE t_productimg
        SET detailImg = #{detailImg}
        WHERE pro_idx = #{pro_idx}
    </update>

    <!-- 총 애니메이션 수를 가져오는 쿼리 -->
    <select id="getTotalAnimeCount" resultType="int">
        SELECT COUNT(*) FROM t_animation
    </select>

    <!-- 페이징된 애니메이션 리스트를 가져오는 쿼리 -->
    <select id="getAniListWithPaging" parameterType="map" resultType="MasterVO">
        SELECT *, DATE_FORMAT(regDT, '%Y-%m-%d') as regDT FROM t_animation
        ORDER BY idx DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="getStoreListWithPaging" resultType="MasterVO">
        SELECT *, DATE_FORMAT(relDT, '%Y-%m-%d') as relDT FROM t_product
        ORDER BY idx DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="getBoardListWithPaging" parameterType="map" resultType="MasterVO">
        SELECT c.idx, tc.type AS category, c.title, u.userid AS author,
        DATE_FORMAT(c.regDT, '%Y-%m-%d') as regDT, c.hit, c.commtype
        FROM t_community c
        LEFT JOIN t_communitytype tc ON c.commtype = tc.code
        LEFT JOIN t_user u ON c.useridx = u.idx
        ORDER BY c.idx
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 전체 게시글 수 조회 -->
    <select id="getTotalBoardCount" resultType="int">
        SELECT COUNT(*) FROM t_community
    </select>

    <!-- 페이징을 적용한 리뷰 목록 조회 -->
    <select id="getReviewListWithPaging" parameterType="map" resultType="MasterVO">
        SELECT r.*, u.userid, DATE_FORMAT(r.regDT, '%Y-%m-%d') as regDT, r.grade
        FROM t_review r
        LEFT JOIN t_user u ON r.useridx = u.idx
        ORDER BY r.idx DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 전체 리뷰 개수 조회 -->
    <select id="getTotalReviewCount" resultType="int">
        SELECT COUNT(*) FROM t_review
    </select>

    <!-- 이벤트 추가 쿼리 -->
    <insert id="insertEvent">
        insert into t_event (title, thumfile, content, event_date, adminidx)
        values (#{title}, #{thumfile}, #{content}, #{event_date}, #{adminidx})
    </insert>

    <!-- 이벤트 목록 불러오기 -->
    <select id="getEventList">
        select idx, title, DATE_FORMAT(event_date, '%Y-%m-%d') as event_date, DATE_FORMAT(regDT, '%Y-%m-%d') as regDT from t_event
    </select>

    <!-- 이벤트 해당 idx로 모달창 내용 띄우기 -->
    <select id="getEventDetail" parameterType="int" resultType="MasterVO">
        SELECT idx, title, content, DATE_FORMAT(event_date, '%Y-%m-%d') as event_date, DATE_FORMAT(regDT, '%Y-%m-%d') as regDT
        FROM t_event
        WHERE idx = #{idx}
    </select>

    <!-- 이벤트 페이지 업데이트 -->
    <update id="updateEvent" parameterType="MasterVO">
        update t_event set title = #{title}, thumfile = #{thumfile}, content = #{content}, event_date = #{event_date}, modifyState = 1, modifyDT = now() where idx = #{idx}
    </update>

    <!-- 해당 이벤트 idx 조회하는 쿼리 -->
    <select id="getEventByIdx" parameterType="int" resultType="com.ict.finalproject.vo.MasterVO">
        SELECT idx, title, content, DATE_FORMAT(event_date, '%Y-%m-%d') as event_date, thumfile
        FROM t_event
        WHERE idx = #{idx}
    </select>

    <!-- 날짜별 회원 가입 수를 가져오는 쿼리 -->
    <select id="getUserRegistrationStats" resultType="map">
        SELECT DATE_FORMAT(regDT, '%Y-%m-%d') AS date, COUNT(*) AS count
        FROM t_user
        GROUP BY DATE_FORMAT(regDT, '%Y-%m-%d')
        ORDER BY DATE_FORMAT(regDT, '%Y-%m-%d')
    </select>

    <!-- 굿즈 상품 idx 해당 하는 데이터 삭제 -->
    <delete id="deleteStoreByIdx" parameterType="int">
        DELETE FROM t_product WHERE idx = #{idx}
    </delete>

    <delete id="deleteProductImagesByProductIdx" parameterType="int">
        DELETE FROM t_productimg WHERE pro_idx = #{pro_idx}
    </delete>

    <!-- 페이징을 적용한 신고된 유저 목록 조회 -->
    <select id="getReportingUserWithPaging" parameterType="map" resultType="MasterVO">
        SELECT b.useridx, u.userid, r.report_type, b.stopDT, b.endDT, b.reason
        FROM t_ban b
        LEFT JOIN t_user u ON b.useridx = u.idx
        LEFT JOIN t_report r ON b.useridx = r.useridx
        GROUP BY b.useridx, u.userid, r.report_type, b.stopDT, b.endDT, b.reason
        ORDER BY b.useridx
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 전체 신고된 유저의 수 조회 -->
    <select id="getTotalReportingUserCount" resultType="int">
        SELECT COUNT(DISTINCT b.useridx) FROM t_ban b
    </select>

    <!-- 페이징을 적용한 댓글 목록 조회 -->
    <select id="getReplyListWithPaging" parameterType="map" resultType="MasterVO">
        SELECT r.idx, u.userid, r.content, DATE_FORMAT(r.regDT, '%Y-%m-%d') AS regDT
        FROM t_comment r
        JOIN t_user u ON r.useridx = u.idx
        WHERE r.parentidx IS NULL OR r.parentidx = 0
        ORDER BY r.idx
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 전체 댓글 개수 조회 -->
    <select id="getTotalReplyCount" resultType="int">
        SELECT COUNT(*) FROM t_comment
    </select>

    <!-- 댓글 정보 조회 -->
    <select id="getCommentByIdx" resultType="MasterVO">
        SELECT idx, content, useridx, DATE_FORMAT(regDT, '%Y-%m-%d') AS regDT
        FROM t_comment
        WHERE idx = #{idx}
    </select>

    <!-- 답글 목록 조회 -->
    <select id="getRepliesByCommentIdx" parameterType="int" resultType="MasterVO">
        SELECT r.idx, u.userid, r.content, DATE_FORMAT(r.regDT, '%Y-%m-%d') AS regDT
        FROM t_comment r
        JOIN t_user u ON r.useridx = u.idx
        WHERE r.parentidx = #{idx}
        ORDER BY r.idx
    </select>

    <select id="findAdminByAdminid" parameterType="String" resultType="MasterVO">
        SELECT * FROM t_admin
        WHERE adminid = #{adminid}
    </select>

    <select id="getUserListWithPaging" resultType="MasterVO">
        SELECT *
        FROM t_user
        ORDER BY regDT DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <!-- idx로 FAQ 정보 가져오기 -->
    <select id="getFAQById" parameterType="int" resultType="com.ict.finalproject.vo.MasterVO">
        SELECT * FROM t_faq WHERE idx = #{idx}
    </select>

    <!-- FAQ 정보 수정 -->
    <update id="updateFAQ" parameterType="MasterVO">
        UPDATE t_faq
        SET question = #{question}, answer = #{answer}, faqtype = #{faqtype}, modifyDT = NOW(), adminidx = #{adminidx}
        WHERE idx = #{idx}
    </update>

</mapper>
