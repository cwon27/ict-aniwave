<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ict.finalproject.DAO.MasterDAO">
    <!-- 관리자 페이지 공지사항 등록 -->
    <insert id="insertNotice" parameterType="com.ict.finalproject.vo.MasterVO">
        INSERT INTO t_notice (title, content, adminidx)
        VALUES (#{title}, #{content}, 2)
    </insert>

    <!-- 관리자페이지 자주묻는 질문 등록 -->
    <insert id="insertFAQ" parameterType="com.ict.finalproject.vo.MasterVO">
        insert into t_faq (question,answer,faqtype,adminidx) values(#{question}, #{answer}, #{faqtype} , 2)
    </insert>

    <!-- 관리자 페이지 굿즈 상품 등록 -->
    <insert id="insertStore" parameterType="com.ict.finalproject.vo.MasterVO">
        INSERT INTO t_product
        (title, price, thumimg, relDT, brand, fee, stock, category, pro_detail)
        VALUES
        (#{title}, #{price}, #{thumimg}, #{relDT}, #{brand}, #{fee}, #{stock}, #{category}, #{pro_detail})
    </insert>

    <!-- 관리자페이지 자주묻는 질문 리스트 -->
    <select id="getFAQList" resultType="com.ict.finalproject.vo.MasterVO">
        select f.idx, f.question, ft.type as faqtype , regDT from t_faq f join t_faqtype ft ON f.faqtype = ft.code
    </select>

    <!-- 관리자 페이지 굿즈 상품 테이블 전체 목록 조회 -->
    <select id="getStoreList" resultType="com.ict.finalproject.vo.MasterVO">
        SELECT
        p.idx,
        p.title,
        p.price,
        p.stock,
        p.relDT,
        f.type AS category
        FROM
        t_product p
        LEFT JOIN
        t_firstcategory f ON p.category = f.code
        ORDER BY
        p.idx
    </select>

    <!-- 관리자페이지 굿즈 상품 총 상품수 구하기 -->
    <select id="getTotalStore">
        select count(*) from t_product
    </select>

    <!-- 관리자페이지 굿즈 상품테이블 카테고리별 카운트 구하기 -->
    <select id="getCategoryCountByCode" resultType="map" parameterType="int">
    SELECT  tf.code AS category_code,  tf.type AS category_type,  COUNT(p.category) AS product_category
    FROM t_firstcategory tf LEFT JOIN t_product p ON p.category = tf.code
    WHERE tf.code = #{categoryCode} GROUP BY tf.code, tf.type
    </select>

    <!-- 커뮤니티 테이블 모든 목록 불러오기 -->
    <select id="getBoardList" resultType="MasterVO">
        SELECT c.idx, tc.type AS category, c.title, u.userid AS author, c.regDT, c.hit, c.commtype
        FROM t_community c LEFT JOIN t_communitytype tc ON c.commtype = tc.code
        LEFT JOIN t_user u ON c.useridx = u.idx ORDER BY c.idx
    </select>

    <!-- 애니 전체 리스트 불러오기 -->
    <select id="getAniAllList" resultType="MasterVO">
        select a.idx, a.title, a.anitype, at.type as anitype_type ,a.agetype, ag.type as age_type , a.director, a.outline, a.regDT
        from t_animation a left join t_anitype at on a.anitype = at.code
        left join t_agetype ag on a.agetype = ag.code
    </select>


    <select id="getAdminIdxByAdminid" resultType="int">
        SELECT idx
        FROM t_admin
        WHERE adminid = #{adminid}
    </select>

    <!-- 관리자페이지 공지사항 목록 불러오기  -->
    <select id="getNoticeList">
        SELECT n.idx, n.title, n.content, n.regDT, u.username AS admin_name , n.modifyDT
        FROM t_notice n
        JOIN t_user u ON n.adminidx = u.idx
    </select>

    <!-- 모든 리뷰 불러오기 -->
    <select id="getReplyList">
        SELECT r.idx, u.userid, r.content, r.grade, r.regDT
        FROM t_review r JOIN t_user u ON r.useridx = u.idx
    </select>

    <!-- idx에 대한 리뷰 상세보기  -->
    <select id="getReviewDetail" resultType="MasterVO" parameterType="int">
        select r.idx, r.content, r.grade,r.useridx,r.regDT, r.imgfile1,r.imgfile2, ol.order_idx
        from t_review r left join t_orderlist ol ON r.orderList_idx = ol.idx
        where r.idx = #{idx}
    </select>

    <!-- 신고 추가 -->
    <insert id="insertReport">
        INSERT INTO t_ban (useridx, stopDT, endDT, reason)
        VALUES ((SELECT u.idx FROM t_user u WHERE u.userid = #{userid}), NOW(), #{endDT}, #{reason})
    </insert>

    <!-- 신고 기능 목록 보여주기 -->
    <select id="getReportinguserList" resultType="MasterVO">
        SELECT r.idx, r.reason, r.reportDT, u.userid, r.handleState, r.handleDT
        FROM t_report r JOIN t_user u ON r.useridx = u.idx
    </select>

    <!-- 신고 테이블에 아이디 있는지 체크 -->
    <select id="isUserBanned" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM t_ban b
        JOIN t_user u ON u.idx = b.useridx
        WHERE u.userid = #{userid}
        AND NOW() BETWEEN b.stopDT AND b.endDT
    </select>

    <!-- 탈퇴 테이블에 아이디 있는지 체크 -->
    <select id="isUserDeleted" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM t_user u
        JOIN t_userDel ud ON u.idx = ud.useridx
        WHERE u.idx = #{idx}
    </select>

    <!-- 유저테이블에서 실제로 회원인지 아닌지 조회 -->
    <select id="findUserIdxByUserid" resultType="int">
        SELECT idx
        FROM t_user
        WHERE userid = #{userid}
    </select>

    <!-- 모든 댓글 불러오기 -->
    <select id="getReviewList" resultType="MasterVO">
        SELECT idx, comm_idx, content, useridx, regDT
        FROM t_comment
        WHERE parentidx IS NULL OR parentidx = 0
    </select>

    <!-- 탈퇴 회원 목록 보여주기 -->
    <select id="getMemberDelList" resultType="MasterVO">
        SELECT d.idx, t.userid, d.delReasonDetail, d.inDate
        FROM t_userDel d JOIN t_user t ON d.useridx = t.idx
    </select>

    <!-- idx의 해당하는 ani  값 불러오기 -->
    <select id="aniSelect" resultType="com.ict.finalproject.vo.MasterVO">
        select idx, title, director, outline from t_animation where idx = #{idx}
    </select>

    <!-- 애니 수정 -->
    <update id="updateAnimation" parameterType="MasterVO">
        update t_animation set post_img = #{post_img_filename}, title = #{title}, anitype = #{anitype}, director = #{director},
        agetype = #{agetype}, outline = #{outline}, modifyState = 1, modifyDT = now() , adminidx = 2 where idx= #{idx}
    </update>

    <!-- 애니 idx 값에 기존에 잇던 이미지 파일 불러오기 -->
    <select id="getCurrentImgFile" resultType="String">
        SELECT post_img
        FROM t_animation
        WHERE idx = #{idx}
    </select>

    <!-- 신고 테이블에서 신고가 완료 되었을 때 처리 상태 및 처리날짜 업데이트  -->
    <update id="updateReport">
        UPDATE t_report
        SET handleState = #{handleState}, handleDT = #{handleDT}
        WHERE idx = #{idx}
    </update>

    <select id="findAdminIdxByUserid" resultType="int" parameterType="string">
        SELECT idx
        FROM t_admin
        WHERE adminid = #{adminid}
    </select>

    <!-- 문의사항 전체 목록 보여주기 -->
    <select id="getQNAList" resultType="MasterVO">
        SELECT q.idx, qt.type AS qnatype, q.title, q.content, u.userid, q.regDT, q.handleState
        FROM t_qna q
        JOIN t_qnatype qt ON q.qnatype = qt.code
        JOIN t_user u ON q.useridx = u.idx
    </select>

    <!-- 문의 안한  실시간 갯수 카운팅 -->
    <select id="getUnansweredQnaCount">
        select count(*) from t_qna where handleState = 0
    </select>

    <!-- 신고 목록 보여주기 -->
    <select id="getReportingUser">
        SELECT b.useridx, u.userid, r.report_type, b.stopDT, b.endDT, b.reason
        FROM t_ban b
        LEFT JOIN t_user u ON b.useridx = u.idx
        LEFT JOIN t_report r ON b.useridx = r.useridx
        GROUP BY b.useridx, u.userid, r.report_type, b.stopDT, b.endDT, b.reason
    </select>

    <!-- 특정 유저의 신고 횟수를 구하는 쿼리 -->
    <select id="getTotalUserReport" parameterType="int" resultType="int">
        SELECT COUNT(DISTINCT useridx) FROM t_ban WHERE useridx = #{useridx}
    </select>

    <!-- 전체 신고 횟수를 구하는 쿼리 -->
    <select id="getTotalReportCount" resultType="int">
        SELECT COUNT(*) FROM t_ban
    </select>

    <!-- qna 처리 상태 업데이트 -->
    <update id="updateHandleState">
        UPDATE t_qna SET handleState = 1 WHERE idx = #{idx}
    </update>

    <!-- t_reply 테이블에 답변 추가 -->
    <insert id="insertReply">
        INSERT INTO t_reply (qna_idx, reply, adminidx, regDT)
        VALUES (#{idx}, #{reply}, #{adminIdx}, #{regDT})
    </insert>

    <!-- 애니 데이터 베이스 생성 -->
    <insert id="insertAnimation" parameterType="com.ict.finalproject.vo.MasterVO">
        INSERT INTO t_animation (post_img, title, anitype, director, agetype, outline, regDT, adminidx)
        VALUES (#{post_img_filename}, #{title}, #{anitype}, #{director}, #{agetype}, #{outline}, now(), #{adminidx})
    </insert>

    <!-- 해당 idx의 값 의 데이터 삭제 -->
    <delete id="deletePostByIdx" parameterType="int">
        DELETE FROM t_animation WHERE idx = #{idx}
    </delete>

    <!-- 상품 정보를 idx로 조회 -->
    <select id="getStoreByIdx" resultType="MasterVO">
        SELECT * FROM t_product WHERE idx = #{idx}
    </select>


    <!-- 상품 정보를 수정 -->
    <update id="updateStore">
        UPDATE t_product SET category = #{category}, title = #{title}, price = #{price}, thumimg = #{thumimg},
        ani_title = #{ani_title}, relDT = #{relDT}, brand = #{brand}, pro_detail = #{pro_detail}, fee = #{fee},
        stock = #{stock}, second_category = #{second_category}, adminidx = #{adminidx}, modifyState = 1, modifyDT = now()  WHERE idx = #{idx}
    </update>

    <select id="findSubCategoriesByCategory" resultType="MasterVO">
        SELECT code, first_code, type
        FROM t_secondcategory
        WHERE code = #{code}
    </select>

    <!-- t_productimg 테이블에 이미지 삽입 -->
    <insert id="insertProductImg">
        INSERT INTO t_productimg (pro_idx, detailImg)
        VALUES (#{pro_idx}, #{detailImg})
    </insert>

    <!-- 해당 idx의 값 공지사항 조회 -->
    <select id="getNoticeById" resultType="MasterVO">
        SELECT idx, title, content, regDT
        FROM t_notice
        WHERE idx = #{idx}
    </select>

    <!-- 공지사항 업데이트 -->
    <update id="updateNotice">
        UPDATE t_notice
        SET title = #{title},
        content = #{content},
        modifyState = 1,
        modifyDT = now(),
        adminidx = #{adminidx}
        WHERE idx = #{idx}
    </update>


    <!-- idx의 해당하는 공지사항  값 불러오기 -->
    <select id="noticeSelect" resultType="com.ict.finalproject.vo.MasterVO">
        select idx, title, content from t_notice where idx = #{idx}
    </select>
</mapper>