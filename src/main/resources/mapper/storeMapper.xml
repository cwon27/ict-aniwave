<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ict.finalproject.DAO.StoreDAO">

    <select id="getStoreDetail" parameterType="int" resultType="com.ict.finalproject.vo.StoreVO">
     SELECT 
        p.idx, 
        p.title, 
        p.price, 
        CONCAT('http://192.168.1.92:8000/', p.thumImg) AS thumImg,  -- 외부 서버 주소를 경로에 붙임
        p.ani_title, 
        p.relDT, 
        p.brand, 
        p.fee, 
        p.stock, 
        p.pro_detail, 
        p.category,
        CONCAT('http://192.168.1.92:8000/', i.detailImg) AS detailImg  -- 조인된 이미지 추가
    FROM t_product p
    LEFT JOIN t_productimg i ON p.idx = i.pro_idx  -- 조인 조건
    WHERE p.idx = #{storeId}
    </select>


    <select id="getStoreList" resultType="com.ict.finalproject.vo.StoreVO">
        SELECT 
            idx, title, price, thumImg , ani_title, relDT, brand, fee, stock, pro_detail, category 
        FROM t_product
    </select>

    <select id="getStoreListByFilter" parameterType="String" resultType="com.ict.finalproject.vo.StoreVO">
        SELECT * FROM t_product
        <choose>
            <when test="'latest'.equals(filterType)">
                ORDER BY created_date DESC
            </when>
            <when test="'popular'.equals(filterType)">
                ORDER BY popularity DESC
            </when>
            <when test="'high-price'.equals(filterType)">
                ORDER BY price DESC
            </when>
            <when test="'low-price'.equals(filterType)">
                ORDER BY price ASC
            </when>
             <otherwise>
            <!-- 기본정령--> 
            ORDER BY created_date DESC
        </otherwise>
        </choose>
    </select>

    <select id="searchStoreList" parameterType="String" resultType="com.ict.finalproject.vo.StoreVO">
        SELECT * FROM t_product
        WHERE title LIKE CONCAT('%', #{keyword}, '%')
           OR description LIKE CONCAT('%', #{keyword}, '%')
    </select>

     <!-- 필터링된 상품 목록 -->
    <select id="getStoreListByFilterCriteria" parameterType="com.ict.finalproject.vo.ProductFilterVO" resultType="com.ict.finalproject.vo.StoreVO">
        SELECT idx, title, ani_title, category, stock, thumImg, price
        FROM t_product
        WHERE 1 = 1
        <if test="ani_title != null and ani_title.size() > 0">
            AND ani_title IN
            <foreach item="ani_title" collection="ani_title" open="(" separator="," close=")">
                #{ani_title}
            </foreach>
        </if>
        <if test="category != null and category.size() > 0">
            AND category IN
            <foreach item="category" collection="category" open="(" separator="," close=")">
                #{category}         
            </foreach>
        </if>
        <if test="stock != null and stock == 0">
            AND stock > 0  <!-- 재고가 0보다 큰 경우만 표시 -->
        </if>
    </select>

    <!-- 채원 시작 -->
    <!-- 장바구니에 상품있는지 체크 -->
    <select id="checkProductInBasket" parameterType="com.ict.finalproject.vo.BasketVO" resultType="int">
        SELECT COUNT(*)
        FROM T_basket
        WHERE useridx = #{useridx} AND pro_idx = #{pro_idx}
    </select>
    <!-- 장바구니에 상품데이터 저장 -->
    <insert id="basketInput" parameterType="com.ict.finalproject.vo.BasketVO">
        INSERT INTO T_basket(pro_idx, useridx, amount, total)
        VALUES(#{pro_idx}, #{useridx}, #{amount}, #{total})
    </insert>
    <!-- 장바구니 리스트 -->
    <select id="basketList" resultType="com.ict.finalproject.DTO.BasketDTO">
        SELECT b.idx, b.pro_idx, b.useridx, b.amount, b.total, p.ani_title, p.title, p.thumImg, p.price, p.fee
        FROM T_basket b
        JOIN T_product p ON b.pro_idx = p.idx
        WHERE b.useridx=${param1} AND b.delState=0
        ORDER BY b.regDT desc
    </select>

</mapper>
