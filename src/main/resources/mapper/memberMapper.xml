<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ict.finalproject.DAO.MemberDAO">
    <!-- 회원 가입 시 사용되는 쿼리 -->
    <insert id="memberCreate" parameterType="memberVO">
        insert into t_user(userid, userpwd, username, email, zipcode, addr, birth)
        values(#{userid}, #{userpwd}, #{username}, #{email}, #{zipcode}, #{addr}, #{birth})
    </insert>

    <!-- 로그인 시 사용되는 쿼리 (권한 정보 포함) -->
    <select id="memberLogin" parameterType="map" resultType="MemberVO">
        select userid, userpwd, username
        from t_user
        where userid = #{param1}
    </select>

    <select id="getUseridx" parameterType="String" resultType="Integer">
        select idx from t_user where userid = #{param1}
    </select>

    <!-- 전체 멤버 리스트 구하기 -->
    <select id="getMemberList" resultType="com.ict.finalproject.vo.MemberVO">
        select idx, userid, username, email, regDT, point from t_user
    </select>

    <!-- 총 유저수 구하기 -->
    <select id="getTotalUser">
        SELECT COUNT(*) FROM t_user
    </select>

    <!--오늘 가입한 유저수 구하기 -->
    <select id="getNewUsers">
        SELECT COUNT(*) FROM t_user WHERE DATE(regDT) = CURDATE()
    </select>

    <!-- 최근 7일간 가입한 유저수 구하기 -->
    <select id="getNewSignups">
        SELECT COUNT(*) FROM t_user WHERE regDT >= CURDATE() - INTERVAL 7 DAY
    </select>

    <!-- 채원 시작-->
    <!-- 리뷰 작성전 리스트 구하기-->
    <select id="getReviewBefore" resultType="com.ict.finalproject.DTO.ReviewBeforeDTO">
        SELECT ol.idx AS orderList_idx, p.thumImg, p.title, p.price, ol.amount, ol.orderState, p.idx
        FROM T_orderList ol
        JOIN T_order o ON ol.order_idx = o.idx
        JOIN T_product p ON ol.pro_idx = p.idx
        LEFT JOIN T_review r ON ol.idx = r.orderList_idx
        WHERE ol.orderState = 6
        AND o.useridx = ${param1}  -- 토큰에서 가져온 useridx
        AND r.orderList_idx IS NULL
    </select>

    <!-- 리뷰 작성 -->
    <insert id="saveReview" parameterType="com.ict.finalproject.vo.ReviewVO">
        INSERT INTO T_review (useridx, orderList_idx, content, grade, imgfile1, imgfile2)
        VALUES (#{useridx}, #{orderList_idx}, #{content}, #{grade}, #{imgfile1}, #{imgfile2})
    </insert>

    <select id="getReviewCompleted" resultType="com.ict.finalproject.DTO.ReviewCompletedDTO">
        SELECT r.*, p.idx AS pro_idx, p.title AS pro_title, p.thumImg As pro_thumImg, p.price As pro_price, o.amount As order_amount, DATE_FORMAT(r.regDT, '%Y.%m.%d') AS formatted_regDT
        FROM T_review r
        JOIN T_orderList o ON r.orderList_idx = o.idx
        JOIN T_product p ON o.pro_idx = p.idx
        WHERE r.delState = 0 and r.useridx=${param1} and r.orderList_idx IS not NULL AND r.delState=0
        ORDER BY r.idx desc
    </select>

    <select id="getReviewEditbefore" resultType="com.ict.finalproject.vo.ReviewVO">
        SELECT *
        FROM T_review
        WHERE orderList_idx=${param1}
    </select>

    <update id="updateReview" parameterType="com.ict.finalproject.vo.ReviewVO">
        UPDATE T_review
        SET content=#{content}, grade=#{grade}, imgfile1=#{imgfile1}, imgfile2=#{imgfile2}, modifyState=1, modifyDT=now()
        WHERE orderList_idx=#{orderList_idx}
    </update>
    
    <update id="reviewDelete">
        UPDATE T_review
        SET delState=1, delDT=now()
        WHERE orderList_idx=${param1}
    </update>

    <!-- 리뷰 작성전 리스트의 갯수 구하기 -->
    <select id="getReviewBeforeAmount" resultType="int">
        SELECT COUNT(ol.idx)
        FROM T_orderList ol
        JOIN T_order o ON ol.order_idx = o.idx
        JOIN T_product p ON ol.pro_idx = p.idx
        LEFT JOIN T_review r ON ol.idx = r.orderList_idx
        WHERE ol.orderState = 6
        AND o.useridx = ${param1}  -- 토큰에서 가져온 useridx
        AND r.orderList_idx IS NULL
    </select>

    <!-- 리뷰 작성 완료 리스트의 갯수 구하기 -->
    <select id="getReviewCompletedAmount" resultType="int">
        SELECT COUNT(*)
        FROM T_review r
        JOIN T_orderList o ON r.orderList_idx = o.idx
        JOIN T_product p ON o.pro_idx = p.idx
        WHERE r.delState = 0
        AND r.useridx = ${param1}
        AND r.orderList_idx IS NOT NULL
        AND r.delState = 0;
    </select>

    <!-- 회원정보 데이터 가져오기 -->
    <select id="getUserinfo" resultType="com.ict.finalproject.vo.MemberVO">
        SELECT idx, userid, userpwd, username, email, zipcode, addr, addrdetail, adult_state, login_type, tel, point
        FROM T_user
        WHERE idx=${param1}
    </select>

    <!-- 회원정보 수정 -->
    <update id="updateUser" parameterType="com.ict.finalproject.vo.MemberVO">
        UPDATE T_user
        SET email=#{email}, tel=#{tel}, zipcode=#{zipcode}, addr=#{addr}, addrdetail=#{addrdetail}, adult_state=#{adult_state}, modifyState=1, modifyDT=now()
        WHERE idx=#{idx}
    </update>

    <!-- 회원탈퇴 -->
    <update id="userDelOk">
        UPDATE T_user
        SET delState=1, delDT=now()
        WHERE idx=${param1}
    </update>
    <insert id="userDelInsert" parameterType="com.ict.finalproject.DTO.UserDelReasonDTO">
        INSERT INTO T_userDel(useridx, delReason, delReasonDetail)
        VALUES (#{useridx}, #{delReason}, #{delReasonDetail})
    </insert>

    <!-- 최근 주문 데이터 최대 5개 가져오기-->
    <select id="getCurrentOrderData" resultType="com.ict.finalproject.DTO.CurrentOrderDataDTO">
        SELECT
        o.idx AS order_idx,
        DATE_FORMAT(o.regDT, '%Y.%m.%d') AS order_date,
        ol.pro_idx AS pro_idx,
        p.thumImg AS pro_image,
        pm.amount AS amount,
        pm.ordername AS orderName,
        pm.orderid AS orderId
        FROM
        T_order o
        JOIN
        T_orderList ol ON o.idx = ol.order_idx
        JOIN
        T_product p ON ol.pro_idx = p.idx
        LEFT JOIN
        T_payment pm ON o.idx = pm.order_idx
        WHERE
        o.useridx = ${param1} and o.payState=1 and pm.successYN=1
        AND
        ol.idx = (
        SELECT MIN(sub_ol.idx)
        FROM T_orderList sub_ol
        WHERE sub_ol.order_idx = o.idx
        )
        ORDER BY
        o.regDT DESC
        LIMIT 5;
    </select>
    <select id="getCurrentLikeGoodsData" resultType="com.ict.finalproject.vo.StoreVO">
        select
        p.idx AS idx,
        p.title AS title,
        p.ani_title AS ani_title,
        p.price AS price,
        p.thumImg AS thumImg
        from T_proLike pl
        join T_product p on pl.pro_idx=p.idx
        where pl.useridx=${param1}
        order by pl.regDT desc
        limit 5;
    </select>
    <select id="getCurrentLikeAniData" resultType="com.ict.finalproject.vo.AniListVO">
        select a.idx AS idx,
        a.title AS title,
        a.post_img AS post_img
        from T_anilike al
        join T_animation a on al.ani_idx=a.idx
        where al.useridx=${param1}
        order by al.regDT desc
        limit 5;
    </select>
    <select id="getLikeGoods" resultType="com.ict.finalproject.vo.StoreVO">
        select
        p.idx AS idx,
        p.title AS title,
        p.ani_title AS ani_title,
        p.price AS price,
        p.thumImg AS thumImg
        from T_proLike pl
        join T_product p on pl.pro_idx=p.idx
        where pl.useridx=${param3}
        order by pl.regDT desc
        limit ${param1} offset ${param2};
    </select>
    <select id="getTotalLikeGoodsCount">
        SELECT COUNT(*)
        FROM T_proLike
        WHERE useridx=${param1}
    </select>
    <select id="getLikeAni" resultType="com.ict.finalproject.vo.AniListVO">
        select a.idx AS idx,
        a.title AS title,
        a.post_img AS post_img
        from T_anilike al
        join T_animation a on al.ani_idx=a.idx
        where al.useridx=${param3}
        order by al.regDT desc
        limit ${param1} offset ${param2};
    </select>
    <select id="getTotalLikeAniCount">
        SELECT COUNT(*)
        FROM T_aniLike
        WHERE useridx=${param1}
    </select>
    <delete id="deleteGoodsLike">
        delete from T_proLike where useridx=${param1} and pro_idx=${param2}
    </delete>
    <delete id="deleteAniLike">
        delete from T_aniLike where useridx=${param1} and ani_idx=${param2}
    </delete>
    <select id="getPagedOrderList" resultType="com.ict.finalproject.DTO.OrderListDTO">
        SELECT
        o.idx AS order_idx,
        DATE_FORMAT(o.regDT, '%Y.%m.%d') AS order_date,
        o.trackingNum As trackingNum,
        pm.orderid AS orderId
        FROM
        T_order o
        JOIN
        T_payment pm ON o.idx = pm.order_idx
        WHERE
        o.useridx = ${param1} and o.payState=1 and pm.successYN=1
        ORDER BY
        o.regDT DESC
        limit ${param3} offset ${param2};
    </select>
    <select id="getOrderProducts" resultType="com.ict.finalproject.DTO.OrderProDTO">
        SELECT
        ol.pro_idx AS pro_idx,
        p.thumImg AS pro_image,
        p.title AS pro_title,
        p.ani_title AS pro_anititle,
        p.price AS pro_price,
        ol.amount AS order_pro_amount,
        ol.orderState AS orderState
        FROM
        T_orderList ol
        JOIN
        T_product p ON ol.pro_idx = p.idx
        WHERE
        ol.order_idx = ${param1}
    </select>
    <select id="getTotalOrderCount">
        SELECT COUNT(DISTINCT o.idx)
        FROM T_order o
        LEFT JOIN T_payment pm ON o.idx = pm.order_idx
        WHERE o.useridx = ${param1}
        AND o.payState = 1
        AND pm.successYN = 1;
    </select>
    <select id="getOrderDetailData" resultType="com.ict.finalproject.DTO.OrderListDTO">
        SELECT
        o.idx AS order_idx,
        DATE_FORMAT(o.regDT, '%Y.%m.%d') AS order_date,
        o.trackingNum As trackingNum,
        o.total_price As total_price,
        o.use_point As use_point,
        o.recipient As recipient,
        o.zipcode As zipcode,
        o.addr As addr,
        o.addrdetail As addrdetail,
        o.tel As tel,
        o.request_memo As request_memo,
        pm.createDT As payDT,
        pm.paytype As paytype,
        pm.amount AS amount,
        pm.orderid AS orderId
        FROM
        T_order o
        JOIN
        T_payment pm ON o.idx = pm.order_idx
        WHERE
        o.idx=${param1} and o.useridx = ${param2} and o.payState=1 and pm.successYN=1
    </select>
    <!-- 적립금 리스트 업데이트-->
    <insert id="pointInsert">
        insert into T_point(useridx, point, type)
        values(${param1}, ${param3}, ${param2})
    </insert>
    <update id="userPointUpdate">
        update T_user
        set point = point + ${param2}
        where idx=${param1}
    </update>
    <!-- 적립금 리스트-->
    <select id="getPointList" resultType="com.ict.finalproject.vo.PointVO">
        SELECT idx, point, DATE_FORMAT(regDT, '%Y.%m.%d') AS formatted_regDT, type
        FROM T_point
        WHERE useridx = 5
        ORDER BY regDT DESC
        limit ${param1} offset ${param2};
    </select>
    <select id="getTotalPointCount">
        SELECT COUNT(*)
        FROM T_point
        WHERE useridx=${param1}
    </select>
    <!-- 채원 끝-->
</mapper>